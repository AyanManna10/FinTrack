{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 156, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Dona2/Downloads/fintrack1/src/lib/db.ts"],"sourcesContent":["import mysql from \"mysql2/promise\";\r\n\r\nexport async function getConnection() {\r\n  return await mysql.createConnection({\r\n    host: process.env.MYSQLHOST,\r\n    port: Number(process.env.MYSQLPORT),\r\n    user: process.env.MYSQLUSER,\r\n    password: process.env.MYSQLPASSWORD,\r\n    database: process.env.MYSQLDATABASE,\r\n  });\r\n}\r\n"],"names":[],"mappings":";;;AAAA;;AAEO,eAAe;IACpB,OAAO,MAAM,mIAAA,CAAA,UAAK,CAAC,gBAAgB,CAAC;QAClC,MAAM,QAAQ,GAAG,CAAC,SAAS;QAC3B,MAAM,OAAO,QAAQ,GAAG,CAAC,SAAS;QAClC,MAAM,QAAQ,GAAG,CAAC,SAAS;QAC3B,UAAU,QAAQ,GAAG,CAAC,aAAa;QACnC,UAAU,QAAQ,GAAG,CAAC,aAAa;IACrC;AACF","debugId":null}},
    {"offset": {"line": 176, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Dona2/Downloads/fintrack1/src/app/api/login/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\r\nimport { getConnection } from \"@/lib/db\";\r\nimport bcrypt from \"bcryptjs\";\r\n\r\nexport async function POST(req: Request) {\r\n  let connection;\r\n  try {\r\n    const { email, password } = await req.json();\r\n    if (!email || !password) {\r\n      return NextResponse.json({ error: \"Missing fields\" }, { status: 400 });\r\n    }\r\n\r\n    connection = await getConnection();\r\n\r\n    const [rows] = await connection.execute<any[]>(\r\n      \"SELECT * FROM users WHERE email = ?\",\r\n      [email]\r\n    );\r\n\r\n    if (rows.length === 0) {\r\n      return NextResponse.json({ error: \"User not found\" }, { status: 404 });\r\n    }\r\n\r\n    const user = rows[0];\r\n    const isPasswordCorrect = await bcrypt.compare(password, user.password);\r\n    if (!isPasswordCorrect) {\r\n      return NextResponse.json({ error: \"Incorrect password\" }, { status: 401 });\r\n    }\r\n\r\n    return NextResponse.json({ message: \"Login successful\", userId: user.id });\r\n  } catch (error) {\r\n    console.error(\"Login error:\", error);\r\n    return NextResponse.json({ error: \"Server error\" }, { status: 500 });\r\n  } finally {\r\n    if (connection) await connection.end();\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEO,eAAe,KAAK,GAAY;IACrC,IAAI;IACJ,IAAI;QACF,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,MAAM,IAAI,IAAI;QAC1C,IAAI,CAAC,SAAS,CAAC,UAAU;YACvB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAiB,GAAG;gBAAE,QAAQ;YAAI;QACtE;QAEA,aAAa,MAAM,CAAA,GAAA,kHAAA,CAAA,gBAAa,AAAD;QAE/B,MAAM,CAAC,KAAK,GAAG,MAAM,WAAW,OAAO,CACrC,uCACA;YAAC;SAAM;QAGT,IAAI,KAAK,MAAM,KAAK,GAAG;YACrB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAiB,GAAG;gBAAE,QAAQ;YAAI;QACtE;QAEA,MAAM,OAAO,IAAI,CAAC,EAAE;QACpB,MAAM,oBAAoB,MAAM,mIAAA,CAAA,UAAM,CAAC,OAAO,CAAC,UAAU,KAAK,QAAQ;QACtE,IAAI,CAAC,mBAAmB;YACtB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAqB,GAAG;gBAAE,QAAQ;YAAI;QAC1E;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;YAAoB,QAAQ,KAAK,EAAE;QAAC;IAC1E,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,gBAAgB;QAC9B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAe,GAAG;YAAE,QAAQ;QAAI;IACpE,SAAU;QACR,IAAI,YAAY,MAAM,WAAW,GAAG;IACtC;AACF","debugId":null}}]
}