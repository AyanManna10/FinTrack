{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 156, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Dona2/Downloads/fintrack1/src/lib/db.ts"],"sourcesContent":["import mysql from \"mysql2/promise\";\r\n\r\nexport async function getConnection() {\r\n  return await mysql.createConnection({\r\n    host: process.env.MYSQLHOST,\r\n    port: Number(process.env.MYSQLPORT),\r\n    user: process.env.MYSQLUSER,\r\n    password: process.env.MYSQLPASSWORD,\r\n    database: process.env.MYSQLDATABASE,\r\n  });\r\n}\r\n"],"names":[],"mappings":";;;AAAA;;AAEO,eAAe;IACpB,OAAO,MAAM,mIAAA,CAAA,UAAK,CAAC,gBAAgB,CAAC;QAClC,MAAM,QAAQ,GAAG,CAAC,SAAS;QAC3B,MAAM,OAAO,QAAQ,GAAG,CAAC,SAAS;QAClC,MAAM,QAAQ,GAAG,CAAC,SAAS;QAC3B,UAAU,QAAQ,GAAG,CAAC,aAAa;QACnC,UAAU,QAAQ,GAAG,CAAC,aAAa;IACrC;AACF","debugId":null}},
    {"offset": {"line": 176, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Dona2/Downloads/fintrack1/src/app/api/register/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\r\nimport { getConnection } from \"@/lib/db\";\r\nimport bcrypt from \"bcryptjs\";\r\n\r\nexport async function POST(req: Request) {\r\n  let connection;\r\n  try {\r\n    const { name, email, password } = await req.json();\r\n\r\n    if (!name || !email || !password) {\r\n      return NextResponse.json({ error: \"Missing fields\" }, { status: 400 });\r\n    }\r\n\r\n    const hashedPassword = await bcrypt.hash(password, 10);\r\n    connection = await getConnection();\r\n\r\n    // Check if user exists\r\n    const [existing] = await connection.execute<any[]>(\r\n      \"SELECT * FROM users WHERE email = ?\",\r\n      [email]\r\n    );\r\n    if (existing.length > 0) {\r\n      return NextResponse.json({ error: \"User already exists\" }, { status: 409 });\r\n    }\r\n\r\n    // Insert user\r\n    await connection.execute(\r\n      \"INSERT INTO users (name, email, password) VALUES (?, ?, ?)\",\r\n      [name, email, hashedPassword]\r\n    );\r\n\r\n    return NextResponse.json({ message: \"User registered successfully\" }, { status: 201 });\r\n  } catch (error) {\r\n    console.error(\"Register error:\", error);\r\n    return NextResponse.json({ error: \"Internal Server Error\" }, { status: 500 });\r\n  } finally {\r\n    if (connection) await connection.end();\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEO,eAAe,KAAK,GAAY;IACrC,IAAI;IACJ,IAAI;QACF,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,MAAM,IAAI,IAAI;QAEhD,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,UAAU;YAChC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAiB,GAAG;gBAAE,QAAQ;YAAI;QACtE;QAEA,MAAM,iBAAiB,MAAM,mIAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU;QACnD,aAAa,MAAM,CAAA,GAAA,kHAAA,CAAA,gBAAa,AAAD;QAE/B,uBAAuB;QACvB,MAAM,CAAC,SAAS,GAAG,MAAM,WAAW,OAAO,CACzC,uCACA;YAAC;SAAM;QAET,IAAI,SAAS,MAAM,GAAG,GAAG;YACvB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAsB,GAAG;gBAAE,QAAQ;YAAI;QAC3E;QAEA,cAAc;QACd,MAAM,WAAW,OAAO,CACtB,8DACA;YAAC;YAAM;YAAO;SAAe;QAG/B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAA+B,GAAG;YAAE,QAAQ;QAAI;IACtF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,mBAAmB;QACjC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAwB,GAAG;YAAE,QAAQ;QAAI;IAC7E,SAAU;QACR,IAAI,YAAY,MAAM,WAAW,GAAG;IACtC;AACF","debugId":null}}]
}